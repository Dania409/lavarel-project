version: '3'
services:
  #первый контейнер для php и сервера apache2
  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    ports:
      #здесь мы указываем на каких портах будет работать контейнер. т.е. первым идёт порт хоста с которого мы запустим контейнер
      #вторым через : идёт порт внутри контейнера 
      - '81:80'
        #      - '25:25'
    volumes:
    # это деректива монтирования
    # здесь показаны вначале локальные каталоги на вашем хосте, из корня проекта, а затем через знак : каталоги где они будут расположены и как называться внутри контейнеров
      - ./html:/var/www/html
      - ./html:/usr/local/apache2/htdocs
      - ./html/apache_logs:/var/log/apache2
      - ./mysite.conf:/usr/local/apache2/conf/extra/mysite.conf
    depends_on:
    # здесь мы указываем зависимость или связь со вторым образом, который мы назовём db и пропишем ниже
      - db
    environment:
    # здесь мы указываем переменную окружения, в данном случае зададим переменной DOMEN, url адрес, обратите внимаение как 
    # эта переменная используется при создании контейнера, на локально хосте если нет домен можно использовать localhost или обращаться к серверу просто по его ip
      - DOMAIN=ramanzes.freemyip.com
    networks:
    # и ещё один важный параметр это внутренняя сеть, наших контейнеров по которой все они будут работать друг с другом
      - myapp_network
  #второй контейнер для сервера mysql создаём просто из образа
  db:
    image: mysql:latest
    volumes:
      - ./mysql:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=base_docker
      - MYSQL_USER=docker
      - MYSQL_PASSWORD=dockerpassword
      - MYSQL_ROOT_PASSWORD=rootpassword
    networks:
      - myapp_network
  #третий контейнер для сервиса phpmyadmin, для управления базой данных, также создаём просто из образа
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - '8081:80'
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=db
    depends_on:
      - db
    networks:
      - myapp_network
  #четвёртый контейнер для сервера nginx создаём просто из образа, у нас будет работать, как прокси, это будет прописано в файле nginx.conf
  proxy:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '80:80'
    networks:
      - myapp_network

#без оступа как и services начинаеся деректива сети.Для простоты я добавлю указание использования сети по умолчанию, называемой bridge. 

networks:
  myapp_network:
    driver: bridge
